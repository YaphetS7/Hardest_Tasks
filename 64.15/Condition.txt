¬ кибернетических механизмах, шагающих роботах, которым приходитс€ соблюдать баланс в реальном времени, часто используютс€ алгоритмы вычислени€ так называемой медианы списка.
‘ормально медиана считаетс€ просто: сортируем список, и если количество элементов в нЄм нечЄтно, берЄм центральный элемент в качестве медианы, а если оно чЄтно, берем среднее значение двух центральных элементов.

¬ реальных проектах в такой список непрерывно поступают новые данные и уход€т старые данные. Ќеобходимо реализовать класс, который хранит список в качестве внутреннего пол€ -- используйте стандартный тип, наподобие List, в выбранном вами €зыке программировани€, который реализует список. “акже в этом классе хранитс€ текущее значение медианы дл€ этого списка. 
ѕотребуютс€ два метода: удаление элемента из списка и добавление элемента в список. ѕосле каждого из этих методов текущее значение медианы должно пересчитыватьс€. —амый простой способ синхронизации значени€ медианы и списка -- выполнение полной сортировки списка и извлечение центрального значени€. ќднако сложность этого алгоритма O(N * log N), и когда данных миллионы, а список мен€етс€ очень часто, он будет вычисл€тьс€ долго и котику в полЄте совершенно не подходит.

ѕридумайте алгоритм пересчЄта медианы при добавлении/удалении элементов, сложность которого была бы O(log N), меньше линейной.